---
/**
 * Astro component for sending a contact form.
 * @component
 * @example
 * ```astro
 * <Contact />
 * ```
 * @returns {astro.AstroNode} The Astro component for the contact form.
 */

import { PUBLIC_RECEIVER_EMAIL_1, PUBLIC_RECEIVER_EMAIL_2 } from '@config';
import sendGrid, { type MailDataRequired } from '@sendgrid/mail';

sendGrid.setApiKey(import.meta.env.SENDGRID_API_KEY);

let mesajTrimis = null;
const errors = { name: '', email: '', phone: '', message: '' };

function isValidEmail(email: string) {
	return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

if (Astro.request.method === 'POST') {
	try {
		// Getting posted data from our contact form
		const data = await Astro.request.formData();
		const name = data.get('nume');
		const phone = data.get('telefon');
		const email = data.get('email');
		const message = data.get('mesaj');

		if (typeof name !== 'string' || name.length < 3) {
			errors.name += 'Te rugăm să introduci un nume valid. ';
		}
		if (typeof email !== 'string' || !isValidEmail(email)) {
			errors.email += 'Email-ul tău nu e valid. ';
		}
		if (typeof phone !== 'string' || phone.length < 10) {
			errors.phone += 'Telefonul trebuie să aibă minim 10 cifre. ';
		}
		if (typeof message !== 'string' || message.length < 10) {
			errors.message += 'Te rugăm să introduci un mesaj valid. ';
		}
		const hasErrors = Object.values(errors).some((msg) => msg);

		const htmlTemplate = `
			<h1>Am primit un mesaj nou de la ${name} pe Melanto.ro</h1>
			<p><strong>Nume:</strong> ${name}</p>
			<p><strong>Email:</strong> ${email}</p>
			<p><strong>Telefon:</strong> ${phone}</p>
			<p><strong>Mesaj:</strong></p>
			<p><pre>${message}</pre></p>
		`;

		// Sending email
		const msg: MailDataRequired = {
			to: PUBLIC_RECEIVER_EMAIL_1,
			from: 'contact@melanto.ro',
			subject: `Mesaj nou pe Melanto.ro de la ${name}`,
			text: `Nume: ${name} \nEmail: ${email} \nTelefon: ${phone} \nMesaj: ${message}`,
			html: htmlTemplate,
			/*
			templateId: 'sgTemplate',
			dynamicTemplateData: {
				name: name,
				email: email,
				phone: phone,
				message: message
			}
			*/
		};
		const msg2: MailDataRequired = {
			to: PUBLIC_RECEIVER_EMAIL_2,
			from: 'contact@melanto.ro',
			subject: `Mesaj nou pe Melanto.ro de la ${name}`,
			text: `Nume: ${name} \nEmail: ${email} \nTelefon: ${phone} \nMesaj: ${message}`,
			html: htmlTemplate,
		};
		if (!hasErrors) {
			await sendGrid
				.send(msg)
				.then(() => {
					// @ts-ignore
					console.log('Email trimis!');
					mesajTrimis = true;
				})
				.catch((error) => {
					mesajTrimis = false;
					// @ts-ignore
					console.error(error, msg, error.response.body.errors, error.ref.response.body.errors);
				});
			await sendGrid
				.send(msg2)
				.then(() => {
					// @ts-ignore
					console.log('Email trimis!');
					mesajTrimis = true;
				})
				.catch((error) => {
					mesajTrimis = false;
					// @ts-ignore
					console.error(error, msg2, error.response.body.errors, error.ref.response.body.errors);
				});
		} else {
			return Astro.redirect('/#contact');
		}
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
		mesajTrimis = false;
	}
}
---

<section class="Section NavTarget Contact" id="contact">
	<div class="ContactContainer">
		<h2 class="SubTitle">Contactează-ne acum!</h2>
		<p class="P">Toate câmpurile sunt obligatorii. Încercăm să-ți răspundem la mesaje în cel mai scurt timp posibil, dar în general asta se întâmplă în maxim 24-48h.</p>
		<form id="contactForm" class="Form ContactForm" method="POST">
			<fieldset class="Fieldset">
				<legend class="Legend">Contactează-ne</legend>
				<label class:list={['Label', { Error: errors.name }]} for="nume">
					<span class="LabelText">Nume:</span>
					<input class="Input" type="text" id="nume" name="nume" maxlength="100" minlength="1" placeholder="Numele tău complet..." required autocomplete="name" />
					{errors.name && <p class="Error">{errors.name}</p>}
				</label>
				<label class:list={['Label', { Error: errors.phone }]} for="telefon">
					<span class="LabelText">Telefon:</span>
					<input class="Input" type="tel" id="telefon" name="telefon" pattern="[0-9]{10,15}" placeholder="Telefonul tău (numai cifre)..." required autocomplete="tel" />
					{errors.phone && <p class="Error">{errors.phone}</p>}
				</label>
				<label class:list={['Label', { Error: errors.email }]} for="email">
					<span class="LabelText">E-mail:</span>
					<input class="Input" type="email" id="email" name="email" placeholder="Adresa ta de mail..." required autocomplete="email" />
					{errors.email && <p class="Error">{errors.email}</p>}
				</label>
				<label class:list={['Label', { Error: errors.message }]} for="mesaj">
					<span class="LabelText">Mesaj:</span>
					<textarea class="Textarea" id="mesaj" name="mesaj" placeholder="Mesajul tău..." required></textarea>
					{errors.message && <p class="Error">{errors.message}</p>}
				</label>
				<button class="Button" type="submit" title="Trimite-ne mesajul acum">
					<span class="ButtonText">Trimite mesaj &raquo;</span>
				</button>
			</fieldset>
		</form>

		{
			mesajTrimis === true && (
				<div class="Message MessageSuccess">
					<button class="CloseMessage" title="Închide acest mesaj">
						<span class="ButtonText">&times;</span>
					</button>
					<h3 class="SubTitle">Mesajul tău a fost trimis cu succes!</h3>
					<p class="P">Îți mulțumim pentru interesul acordat. În cel mai scurt timp posibil îți vom răspunde la mesaj.</p>
				</div>
			)
		}

		{
			mesajTrimis === false && (
				<div class="Message MessageError">
					<button class="CloseMessage" title="Închide acest mesaj">
						<span class="ButtonText">&times;</span>
					</button>
					<h3 class="SubTitle">Mesajul tău NU a putut fi transmis!</h3>
					<p class="P">
						Ne pare rău, dar mesajul tău nu a putut fi transmis. Contactează-ne direct la <a href="mailto:contact@melanto.ro">contact@melanto.ro</a>!
					</p>
				</div>
			)
		}

		<script>
			// hide the message after 10 seconds or when the user clicks the close button
			const message = document.querySelector('.Message');
			if (message && message !== null) {
				setTimeout(() => {
					message.classList.add('MessageHidden');
				}, 10000);
				const closeButton = message.querySelector('.CloseMessage');
				closeButton?.addEventListener('click', () => {
					message.classList.add('MessageHidden');
				});
			}
		</script>
	</div>
</section>
